import React, { useState, useCallback, useEffect } from 'react';
import { MdOutlineRecordVoiceOver } from "react-icons/md";
import VoiceRecorder from '../components/VoiceRecorder';
import ChatMessage from '../components/ChatMessage';
import LanguageSelector from '../components/LanguageSelector';
import { initializeGemini, generateResponse } from '../services/gemini';
import { speechToText, textToSpeech } from '../services/speech';
import { getLanguageCode } from '../utils/languageMapping';

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_VOICE_CHATBOT_API_KEY;

function Voicechatbot() {
  const [messages, setMessages] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState({
    code: 'en',
    name: 'English',
    localName: 'English',
  });
  const [voices, setVoices] = useState([]);

  useEffect(() => {
    initializeGemini(GEMINI_API_KEY);
    
    // Initialize voices for speech synthesis
    if ('speechSynthesis' in window) {
      // Get voices on load
      const loadVoices = () => {
        const availableVoices = window.speechSynthesis.getVoices();
        setVoices(availableVoices);
        console.log('Available voices:', availableVoices.map(v => `${v.name} (${v.lang})`));
      };
      
      // Chrome loads voices asynchronously
      if (window.speechSynthesis.onvoiceschanged !== undefined) {
        window.speechSynthesis.onvoiceschanged = loadVoices;
      }
      
      loadVoices();
    }
  }, []);

  // Handle language change
  useEffect(() => {
    if (voices.length > 0) {
      console.log(`Selected language changed to: ${selectedLanguage.code}`);
      // Log available voices for this language
      const languageVoices = voices.filter(v => 
        v.lang.startsWith(selectedLanguage.code) || 
        v.lang.startsWith(selectedLanguage.code.split('-')[0])
      );
      console.log(`Available voices for ${selectedLanguage.code}:`, 
        languageVoices.map(v => `${v.name} (${v.lang})`)
      );
    }
  }, [selectedLanguage, voices]);

  const handleRecordingComplete = useCallback(async () => {
    setIsProcessing(true);
    
    try {
      const userMessage = {
        content: 'üé§ Recording...',
        type: 'user',
      };
      setMessages((prev) => [...prev, userMessage]);

      const languageCode = getLanguageCode(selectedLanguage.code);
      const transcribedText = await speechToText(languageCode);
      
      setMessages((prev) => 
        prev.map((msg, idx) => 
          idx === prev.length - 1 
            ? { ...msg, content: transcribedText }
            : msg
        )
      );

      const response = await generateResponse(transcribedText, selectedLanguage.code);

      const assistantMessage = {
        content: response,
        type: 'assistant',
      };
      setMessages((prev) => [...prev, assistantMessage]);

      // Use the updated text-to-speech function with proper language code
      await textToSpeech(response, languageCode)
        .catch(error => {
          console.error('Text-to-speech error:', error);
          // If there's an error with TTS, we still want to show the text response
        });

    } catch (error) {
      console.error('Error processing voice message:', error);
      
      const errorMessages = {
        en: 'Sorry, there was an error processing your message. Please try again.',
        hi: '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
        mr: '‡§ï‡•ç‡§∑‡§Æ‡§∏‡•ç‡§µ, ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ‡§®‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä ‡§Ü‡§≤‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.',
        pa: '‡®Æ‡©Å‡®Ü‡®´‡®º ‡®ï‡®∞‡®®‡®æ, ‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®™‡©ç‡®∞‡©ã‡®∏‡©à‡®∏ ‡®ï‡®∞‡®® ‡®µ‡®ø‡©±‡®ö ‡®ó‡®≤‡®§‡©Ä ‡®π‡©ã‡®à‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®¶‡©Å‡®¨‡®æ‡®∞‡®æ ‡®ï‡©ã‡®∏‡®º‡®ø‡®∏‡®º ‡®ï‡®∞‡©ã‡•§',
        bn: '‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        te: '‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞Æ‡±Ä ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞≤‡±ã‡∞™‡∞Ç ‡∞ú‡∞∞‡∞ø‡∞ó‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.',
        kn: '‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤µ‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¶‡≥ã‡≤∑ ‡≤ï‡≤Ç‡≤°‡≥Å‡≤¨‡≤Ç‡≤¶‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.',
      };
      
      const errorMessage = {
        content: errorMessages[selectedLanguage.code] || errorMessages.en,
        type: 'assistant',
      };
      
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsProcessing(false);
    }
  }, [selectedLanguage]);

  return (
    <div className="min-h-screen bg-gray-100">
      <header className="bg-green-600 text-white p-4 shadow-md rounded-lg">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center gap-2">
            <MdOutlineRecordVoiceOver className="w-8 h-8" />
            <h1 className="text-2xl font-bold">Kisan Saathi / ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§æ‡§•‡•Ä</h1>
          </div>
          <LanguageSelector
            selectedLanguage={selectedLanguage}
            onLanguageChange={setSelectedLanguage}
          />
        </div>
      </header>

      <main className="container mx-auto max-w-4xl p-4">
        <div className="bg-gray-50 rounded-lg shadow-lg min-h-[70vh] p-4 mb-4">
          {messages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-[60vh] text-gray-500">
              <MdOutlineRecordVoiceOver className="w-16 h-16 mb-4 text-green-500" />
              <p className="text-xl mb-2">Welcome! / ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!</p>
              <p className="text-sm text-center">
                Press the mic button below to ask your question
                <br />
                ‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§Æ‡§æ‡§á‡§ï ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {messages.map((message, index) => (
                <ChatMessage key={index} message={message} />
              ))}
            </div>
          )}
        </div>

        <div className="flex justify-center">
          <VoiceRecorder
            onRecordingComplete={handleRecordingComplete}
            isProcessing={isProcessing}
          />
        </div>
      </main>
    </div>
  );
}

export default Voicechatbot;